## Introduction

**Next**: [[Advanced Recursion]]

Recursion is process that repeats itself in a similar way. Anything that has its definition nested inside itself is considered to be recursive. For example GNU stands for GNU not Unix!. Expanding this acronym gives us ((GNU not Unix) not Unix!). As you can see this will go on forever and GNU's definition is nested inside itself so it is recursive. The Fibonacci sequence is also recursive: F(n) = F(n-1)+F(n-2). Inside the function F, we see two more F's! 

To terminate a recursive function, we need a stopping point, otherwise known as a base case. A base case is where the function will begin to unwind itself, often computing a result. For the Fibonacci sequence, the base case is F(0) = 1 and F(1) = 1 and we can see that for all N>1, the Fibonacci sequence will reach the base case.

So for something to be recursive in computer science, it needs:

* a recursive definition (contained in itself) and 
* a base case that all valid inputs will eventually reach

Template for recursion:

[[[[
recursion(parameter)
    if base_case (parameter):
        stop
    recursion( operation(parameter) )
]]]]

* *recursion* is the recursive function
* *base_case* is the check if the parameter has reached the base case
* *operation* reduces the parameters towards the base case

## Factorial

Let's look at a simple recursive function: factorial.

1! = 1

n! = 1 * 2 * 3 .... n.

Or we could write it as n! = (n-1)! * n. We now see that in this form, the factorial function is defined within itself which makes it recursive. Our base case is 1! = 1. 

Example:

4! 

= 3! * 4 

= 2! * 3 * 4 

= 1! * 2 * 3 * 4 

= 1 * 2 * 3 * 4 

= 24

### Formalization

[[[[{lang-html}
Let f(n) be the nth factorial number where n is a positive integer.

Base case:
f(1) = 1

Recurrence:
f(n) = f(n-1) * n

Example:
f(4) 
= f(3) * 4
= f(2) * 3 * 4
= f(1) * 2 * 3 * 4  [Base Case]
= 1 * 2 * 3 * 4
= 24
]]]]

### Implementation
[[[[
int factorial(int n){
   if(n == 1)return 1;
   return factorial(n - 1) * n;
}
]]]]

## Sum of digits of a string

We can use recursion in many places and we can apply it to simple problems that you probably have not thought about. Summing the digits of a string can be done using simple loop but we can also use recursion to do it.

Let's say we have the string '23528'. The total is equal to the first digit + the sum of the rest of the digits. 2 + '3528'. We can do the exact same thing for the rest of the digits: the second digit + the sum of the rest of the digits and keep doing this until we have no more digits.

* f('23528')
* f('3528') + 2
* f('528') + 3 + 2
* f('28') + 5 + 3 + 2
* f('8') + 2 + 5 + 3 + 2
* f('') + 8 + 2 + 5 + 3 + 2
* 0 + 8 + 2 + 5 + 3 + 2
* 20

### Formalization

[[[[{lang-html}
Let sum(string) be the sum of digits in a string
Let n be the length of the string

For simplicity, let string[x..y] be the substring of the string from index x to index y. 
The starting index will be 1.

Example: 
string = 'abcd'.
string[1..3] = 'abc'
string[1..1] = ''
string[1] = 'a'

Base case:
sum(empty) = 0

Recurrence:
sum(string) = sum(string[2..n]) + int(string[1])

Example:
sum('23528')
= sum('3528') + 2
= (sum('528') + 3) + 2
= ((sum('28') + 5) + 3) + 2
= (((sum('8') + 2) + 5) + 3) + 2
= ((((sum('') + 8) + 2) + 5) + 3) + 2
= ((((0 + 8) + 2) + 5) + 3) + 2
= 20
]]]]

### Implementation

[[[[
int sum(string str){
   int n = str.length();
   if(n == 0){
       return 0;
    }
   else{
     int charToNum = (str.charAt(0) - '0');
     return sum(str.substring(1, n)) + charToNum;
   }
}

sum('23528');
]]]]

## Count

Let's say we have an string of N characters and we want to find the number of times the letter 'c' appears. This time we need to add some logic to the problem. 

If the first letter of the string is a 'c', then we can add 1 to the count. Otherwise, we don't add anything. We can do the exact same thing for the substring without the first letter. If the second letter of the string is a 'c', we add 1 other we don't add anything etc.

For example we have the string 'cacaec'. Since the first letter is a 'c' we add 1 to the count. Then we remove the first letter and get 'acaec', the first letter is not a 'c' so we don't add to the count. We keep reducing this way until we get an empty string and we return the count. 

* 'cacaec'
* 'acaec' +1
* 'caec' + 0 + 1
* 'aec' + 1 + 0 + 1
* 'ec' + 0 + 1 + 0 + 1
* 'c'  + 0 + 0 + 1 + 0 +1
* '' + 1 + 0 + 0 + 1 + 0 + 1
* 0 + 1 + 0 + 0 + 1 + 0 + 1
* 3


### Formalization

[[[[{lang-html}
Let count(string) be the number of 'c's in the string

For simplicity, let string[x..y] be the substring of the string from x to y.
Example: 
string = 'abcd'.
string[1..3] = 'bcd'

Base case:
count(empty) = 0

Recurrence:
count(string) =  {if string[n]=='c'  count(string[2..n])+1
                 {else               count(string[2..n])

Example:
count('cacaec')
= count('acaec') + 1
= (count('caec') + 0) + 1
= ((count('aec')+ 1) + 0) + 1
= (((count('ec') + 0) + 1) + 0) +1
= ((((count('c') + 0) + 0) + 1) + 0)+1
= ((((count('') + 1) + 0) + 0) + 1) + 0) + 1
= ((((0 + 1) + 0) + 0) + 1) + 0) + 1
= 3
]]]]
### Implementation
[[[[
int count3(string str){
   int n = str.length();
   if(n == 0)return 0;
   if(str.charAt(0) == 'c'){
      return count3(str.substring(1, n)) + 1;
   }
   else{
     return count3(str.substring(1, n));
   }
}

count3('cacaec');

]]]]

## Calculate Exponential

Let's say we wanted to find x^^n^^ and for the sake of this problem we want the last four digits of that number. Note that 267^^4^^ mod 10000 = (267^^3^^ mod 10000) * 267 mod 10000. This is important because it means we can take the last 4 digits in each step instead of having to compute the giant exponent and then taking the last 4 digits. We can do this problem very easily by using a simple loop, but we can do better by using recursion. By definition of exponents, x^^a^^ * x^^a^^ = x^^2a^^. Using this we can see that if n is divisible by 2, then x^^n^^ = x^^n/2^^ * x^^n/2^^. 

For example 5^^4^^ = 5^^2^^ * 5^^2^^

But let's take a look at x^^n/2^^. If n is even we can do the exact same thing! x^^n/2^^ = x^^n/4^^ * x^^n/4^^. We are solving a reduced version of the same problem so we have a recurrence relation. The base case is simple: x^^1^^ = x. 

But what if n is odd and not 1? Then we have x^^n^^ = x^^n/2^^ * x^^n/2^^ * x. Thus our recursive function has 3 different cases: the base case, even case and odd case.

### Formalization
[[[[{lang-html}
Let exp(b,n) be b^n

Base case:
exp(b,1) = 1  [Since b^1 = b]

Recurrence:
exp(b,n) = {if n divisible by 2    exp(b,n/2)^2 % 10000
           {else                   (exp(b,n/2)^2)*b % 10000

Example: (for simplicity, leave out the modulus)
exp(3,10)
= exp(3, 5) ^ 2
= (exp(3, 2) ^ 2)) * 3) ^ 2
= (((exp(3, 1) ^ 2) * 3) ^ 2) [Base case]
= (((3 ^ 2) ^ 2) * 3) ^ 2)
= ((9 ^ 2) * 3) ^ 2)
= (81 * 3) ^ 2
= (243) ^ 2
= 59049
]]]]
### Implementation
[[[[
int exponent(int b, int n){
   if(n == 1)return b;
   if(n % 2 == 0){
     int x = exponent(b, n / 2);
     return (x * x) % 10000;
   }
   else{
     int x = exponent(b, n / 2);
     return (x * x * b) % 10000;
   }
}

]]]]

## Exercises

For each exercise, treat the input as if it were defined recursively. For example, an array would be defined as [first, [rest]]

1. Given an array of N integers, write a recursive function to get the sum.
2. Given a string S, write a recursive function to determine if it is a palindrome.
3. Given a number N, write a recursive function to output the number in binary.
4. Given a string S, write a recursive function to return a reversed string.
